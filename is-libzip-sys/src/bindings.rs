/* automatically generated by rust-bindgen 0.55.1 */

pub const LIBZIP_VERSION: &'static [u8; 8usize] = b"1.7.3.1\0";
pub const LIBZIP_VERSION_MAJOR: u32 = 1;
pub const LIBZIP_VERSION_MINOR: u32 = 7;
pub const LIBZIP_VERSION_MICRO: u32 = 3;
pub const __STDC_FORMAT_MACROS: u32 = 1;
pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const _STL_LANG: u32 = 0;
pub const _HAS_CXX17: u32 = 0;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_NODISCARD: u32 = 0;
pub const _ARGMAX: u32 = 100;
pub const _CRT_INT_MAX: u32 = 2147483647;
pub const _CRT_FUNCTIONS_REQUIRED: u32 = 1;
pub const _CRT_HAS_CXX17: u32 = 0;
pub const _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE: u32 = 1;
pub const _CRT_BUILD_DESKTOP_APP: u32 = 1;
pub const _CRT_INTERNAL_NONSTDC_NAMES: u32 = 1;
pub const __STDC_SECURE_LIB__: u32 = 200411;
pub const __GOT_SECURE_LIB__: u32 = 200411;
pub const __STDC_WANT_SECURE_LIB__: u32 = 1;
pub const _SECURECRT_FILL_BUFFER_PATTERN: u32 = 254;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES: u32 = 1;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY: u32 = 0;
pub const WCHAR_MIN: u32 = 0;
pub const WCHAR_MAX: u32 = 65535;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 65535;
pub const PRId8: &'static [u8; 4usize] = b"hhd\0";
pub const PRId16: &'static [u8; 3usize] = b"hd\0";
pub const PRId32: &'static [u8; 2usize] = b"d\0";
pub const PRId64: &'static [u8; 4usize] = b"lld\0";
pub const PRIdLEAST8: &'static [u8; 4usize] = b"hhd\0";
pub const PRIdLEAST16: &'static [u8; 3usize] = b"hd\0";
pub const PRIdLEAST32: &'static [u8; 2usize] = b"d\0";
pub const PRIdLEAST64: &'static [u8; 4usize] = b"lld\0";
pub const PRIdFAST8: &'static [u8; 4usize] = b"hhd\0";
pub const PRIdFAST16: &'static [u8; 2usize] = b"d\0";
pub const PRIdFAST32: &'static [u8; 2usize] = b"d\0";
pub const PRIdFAST64: &'static [u8; 4usize] = b"lld\0";
pub const PRIdMAX: &'static [u8; 4usize] = b"lld\0";
pub const PRIdPTR: &'static [u8; 4usize] = b"lld\0";
pub const PRIi8: &'static [u8; 4usize] = b"hhi\0";
pub const PRIi16: &'static [u8; 3usize] = b"hi\0";
pub const PRIi32: &'static [u8; 2usize] = b"i\0";
pub const PRIi64: &'static [u8; 4usize] = b"lli\0";
pub const PRIiLEAST8: &'static [u8; 4usize] = b"hhi\0";
pub const PRIiLEAST16: &'static [u8; 3usize] = b"hi\0";
pub const PRIiLEAST32: &'static [u8; 2usize] = b"i\0";
pub const PRIiLEAST64: &'static [u8; 4usize] = b"lli\0";
pub const PRIiFAST8: &'static [u8; 4usize] = b"hhi\0";
pub const PRIiFAST16: &'static [u8; 2usize] = b"i\0";
pub const PRIiFAST32: &'static [u8; 2usize] = b"i\0";
pub const PRIiFAST64: &'static [u8; 4usize] = b"lli\0";
pub const PRIiMAX: &'static [u8; 4usize] = b"lli\0";
pub const PRIiPTR: &'static [u8; 4usize] = b"lli\0";
pub const PRIo8: &'static [u8; 4usize] = b"hho\0";
pub const PRIo16: &'static [u8; 3usize] = b"ho\0";
pub const PRIo32: &'static [u8; 2usize] = b"o\0";
pub const PRIo64: &'static [u8; 4usize] = b"llo\0";
pub const PRIoLEAST8: &'static [u8; 4usize] = b"hho\0";
pub const PRIoLEAST16: &'static [u8; 3usize] = b"ho\0";
pub const PRIoLEAST32: &'static [u8; 2usize] = b"o\0";
pub const PRIoLEAST64: &'static [u8; 4usize] = b"llo\0";
pub const PRIoFAST8: &'static [u8; 4usize] = b"hho\0";
pub const PRIoFAST16: &'static [u8; 2usize] = b"o\0";
pub const PRIoFAST32: &'static [u8; 2usize] = b"o\0";
pub const PRIoFAST64: &'static [u8; 4usize] = b"llo\0";
pub const PRIoMAX: &'static [u8; 4usize] = b"llo\0";
pub const PRIoPTR: &'static [u8; 4usize] = b"llo\0";
pub const PRIu8: &'static [u8; 4usize] = b"hhu\0";
pub const PRIu16: &'static [u8; 3usize] = b"hu\0";
pub const PRIu32: &'static [u8; 2usize] = b"u\0";
pub const PRIu64: &'static [u8; 4usize] = b"llu\0";
pub const PRIuLEAST8: &'static [u8; 4usize] = b"hhu\0";
pub const PRIuLEAST16: &'static [u8; 3usize] = b"hu\0";
pub const PRIuLEAST32: &'static [u8; 2usize] = b"u\0";
pub const PRIuLEAST64: &'static [u8; 4usize] = b"llu\0";
pub const PRIuFAST8: &'static [u8; 4usize] = b"hhu\0";
pub const PRIuFAST16: &'static [u8; 2usize] = b"u\0";
pub const PRIuFAST32: &'static [u8; 2usize] = b"u\0";
pub const PRIuFAST64: &'static [u8; 4usize] = b"llu\0";
pub const PRIuMAX: &'static [u8; 4usize] = b"llu\0";
pub const PRIuPTR: &'static [u8; 4usize] = b"llu\0";
pub const PRIx8: &'static [u8; 4usize] = b"hhx\0";
pub const PRIx16: &'static [u8; 3usize] = b"hx\0";
pub const PRIx32: &'static [u8; 2usize] = b"x\0";
pub const PRIx64: &'static [u8; 4usize] = b"llx\0";
pub const PRIxLEAST8: &'static [u8; 4usize] = b"hhx\0";
pub const PRIxLEAST16: &'static [u8; 3usize] = b"hx\0";
pub const PRIxLEAST32: &'static [u8; 2usize] = b"x\0";
pub const PRIxLEAST64: &'static [u8; 4usize] = b"llx\0";
pub const PRIxFAST8: &'static [u8; 4usize] = b"hhx\0";
pub const PRIxFAST16: &'static [u8; 2usize] = b"x\0";
pub const PRIxFAST32: &'static [u8; 2usize] = b"x\0";
pub const PRIxFAST64: &'static [u8; 4usize] = b"llx\0";
pub const PRIxMAX: &'static [u8; 4usize] = b"llx\0";
pub const PRIxPTR: &'static [u8; 4usize] = b"llx\0";
pub const PRIX8: &'static [u8; 4usize] = b"hhX\0";
pub const PRIX16: &'static [u8; 3usize] = b"hX\0";
pub const PRIX32: &'static [u8; 2usize] = b"X\0";
pub const PRIX64: &'static [u8; 4usize] = b"llX\0";
pub const PRIXLEAST8: &'static [u8; 4usize] = b"hhX\0";
pub const PRIXLEAST16: &'static [u8; 3usize] = b"hX\0";
pub const PRIXLEAST32: &'static [u8; 2usize] = b"X\0";
pub const PRIXLEAST64: &'static [u8; 4usize] = b"llX\0";
pub const PRIXFAST8: &'static [u8; 4usize] = b"hhX\0";
pub const PRIXFAST16: &'static [u8; 2usize] = b"X\0";
pub const PRIXFAST32: &'static [u8; 2usize] = b"X\0";
pub const PRIXFAST64: &'static [u8; 4usize] = b"llX\0";
pub const PRIXMAX: &'static [u8; 4usize] = b"llX\0";
pub const PRIXPTR: &'static [u8; 4usize] = b"llX\0";
pub const SCNd8: &'static [u8; 4usize] = b"hhd\0";
pub const SCNd16: &'static [u8; 3usize] = b"hd\0";
pub const SCNd32: &'static [u8; 2usize] = b"d\0";
pub const SCNd64: &'static [u8; 4usize] = b"lld\0";
pub const SCNdLEAST8: &'static [u8; 4usize] = b"hhd\0";
pub const SCNdLEAST16: &'static [u8; 3usize] = b"hd\0";
pub const SCNdLEAST32: &'static [u8; 2usize] = b"d\0";
pub const SCNdLEAST64: &'static [u8; 4usize] = b"lld\0";
pub const SCNdFAST8: &'static [u8; 4usize] = b"hhd\0";
pub const SCNdFAST16: &'static [u8; 2usize] = b"d\0";
pub const SCNdFAST32: &'static [u8; 2usize] = b"d\0";
pub const SCNdFAST64: &'static [u8; 4usize] = b"lld\0";
pub const SCNdMAX: &'static [u8; 4usize] = b"lld\0";
pub const SCNdPTR: &'static [u8; 4usize] = b"lld\0";
pub const SCNi8: &'static [u8; 4usize] = b"hhi\0";
pub const SCNi16: &'static [u8; 3usize] = b"hi\0";
pub const SCNi32: &'static [u8; 2usize] = b"i\0";
pub const SCNi64: &'static [u8; 4usize] = b"lli\0";
pub const SCNiLEAST8: &'static [u8; 4usize] = b"hhi\0";
pub const SCNiLEAST16: &'static [u8; 3usize] = b"hi\0";
pub const SCNiLEAST32: &'static [u8; 2usize] = b"i\0";
pub const SCNiLEAST64: &'static [u8; 4usize] = b"lli\0";
pub const SCNiFAST8: &'static [u8; 4usize] = b"hhi\0";
pub const SCNiFAST16: &'static [u8; 2usize] = b"i\0";
pub const SCNiFAST32: &'static [u8; 2usize] = b"i\0";
pub const SCNiFAST64: &'static [u8; 4usize] = b"lli\0";
pub const SCNiMAX: &'static [u8; 4usize] = b"lli\0";
pub const SCNiPTR: &'static [u8; 4usize] = b"lli\0";
pub const SCNo8: &'static [u8; 4usize] = b"hho\0";
pub const SCNo16: &'static [u8; 3usize] = b"ho\0";
pub const SCNo32: &'static [u8; 2usize] = b"o\0";
pub const SCNo64: &'static [u8; 4usize] = b"llo\0";
pub const SCNoLEAST8: &'static [u8; 4usize] = b"hho\0";
pub const SCNoLEAST16: &'static [u8; 3usize] = b"ho\0";
pub const SCNoLEAST32: &'static [u8; 2usize] = b"o\0";
pub const SCNoLEAST64: &'static [u8; 4usize] = b"llo\0";
pub const SCNoFAST8: &'static [u8; 4usize] = b"hho\0";
pub const SCNoFAST16: &'static [u8; 2usize] = b"o\0";
pub const SCNoFAST32: &'static [u8; 2usize] = b"o\0";
pub const SCNoFAST64: &'static [u8; 4usize] = b"llo\0";
pub const SCNoMAX: &'static [u8; 4usize] = b"llo\0";
pub const SCNoPTR: &'static [u8; 4usize] = b"llo\0";
pub const SCNu8: &'static [u8; 4usize] = b"hhu\0";
pub const SCNu16: &'static [u8; 3usize] = b"hu\0";
pub const SCNu32: &'static [u8; 2usize] = b"u\0";
pub const SCNu64: &'static [u8; 4usize] = b"llu\0";
pub const SCNuLEAST8: &'static [u8; 4usize] = b"hhu\0";
pub const SCNuLEAST16: &'static [u8; 3usize] = b"hu\0";
pub const SCNuLEAST32: &'static [u8; 2usize] = b"u\0";
pub const SCNuLEAST64: &'static [u8; 4usize] = b"llu\0";
pub const SCNuFAST8: &'static [u8; 4usize] = b"hhu\0";
pub const SCNuFAST16: &'static [u8; 2usize] = b"u\0";
pub const SCNuFAST32: &'static [u8; 2usize] = b"u\0";
pub const SCNuFAST64: &'static [u8; 4usize] = b"llu\0";
pub const SCNuMAX: &'static [u8; 4usize] = b"llu\0";
pub const SCNuPTR: &'static [u8; 4usize] = b"llu\0";
pub const SCNx8: &'static [u8; 4usize] = b"hhx\0";
pub const SCNx16: &'static [u8; 3usize] = b"hx\0";
pub const SCNx32: &'static [u8; 2usize] = b"x\0";
pub const SCNx64: &'static [u8; 4usize] = b"llx\0";
pub const SCNxLEAST8: &'static [u8; 4usize] = b"hhx\0";
pub const SCNxLEAST16: &'static [u8; 3usize] = b"hx\0";
pub const SCNxLEAST32: &'static [u8; 2usize] = b"x\0";
pub const SCNxLEAST64: &'static [u8; 4usize] = b"llx\0";
pub const SCNxFAST8: &'static [u8; 4usize] = b"hhx\0";
pub const SCNxFAST16: &'static [u8; 2usize] = b"x\0";
pub const SCNxFAST32: &'static [u8; 2usize] = b"x\0";
pub const SCNxFAST64: &'static [u8; 4usize] = b"llx\0";
pub const SCNxMAX: &'static [u8; 4usize] = b"llx\0";
pub const SCNxPTR: &'static [u8; 4usize] = b"llx\0";
pub const ZIP_INT8_MAX: u32 = 127;
pub const ZIP_UINT8_MAX: u32 = 255;
pub const ZIP_INT16_MAX: u32 = 32767;
pub const ZIP_UINT16_MAX: u32 = 65535;
pub const ZIP_INT32_MAX: u32 = 2147483647;
pub const ZIP_UINT32_MAX: u32 = 4294967295;
pub const ZIP_INT64_MAX: u64 = 9223372036854775807;
pub const ZIP_UINT64_MAX: i32 = -1;
pub const _CRT_INTERNAL_STDIO_SYMBOL_PREFIX: &'static [u8; 1usize] = b"\0";
pub const _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION: u32 = 1;
pub const _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR: u32 = 2;
pub const _CRT_INTERNAL_PRINTF_LEGACY_WIDE_SPECIFIERS: u32 = 4;
pub const _CRT_INTERNAL_PRINTF_LEGACY_MSVCRT_COMPATIBILITY: u32 = 8;
pub const _CRT_INTERNAL_PRINTF_LEGACY_THREE_DIGIT_EXPONENTS: u32 = 16;
pub const _CRT_INTERNAL_SCANF_SECURECRT: u32 = 1;
pub const _CRT_INTERNAL_SCANF_LEGACY_WIDE_SPECIFIERS: u32 = 2;
pub const _CRT_INTERNAL_SCANF_LEGACY_MSVCRT_COMPATIBILITY: u32 = 4;
pub const BUFSIZ: u32 = 512;
pub const _NSTREAM_: u32 = 512;
pub const _IOB_ENTRIES: u32 = 3;
pub const EOF: i32 = -1;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 64;
pub const _IONBF: u32 = 4;
pub const L_tmpnam: u32 = 260;
pub const L_tmpnam_s: u32 = 260;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const SEEK_SET: u32 = 0;
pub const FILENAME_MAX: u32 = 260;
pub const FOPEN_MAX: u32 = 20;
pub const _SYS_OPEN: u32 = 20;
pub const TMP_MAX: u32 = 2147483647;
pub const TMP_MAX_S: u32 = 2147483647;
pub const _TMP_MAX_S: u32 = 2147483647;
pub const SYS_OPEN: u32 = 20;
pub const TIME_UTC: u32 = 1;
pub const ZIP_CREATE: u32 = 1;
pub const ZIP_EXCL: u32 = 2;
pub const ZIP_CHECKCONS: u32 = 4;
pub const ZIP_TRUNCATE: u32 = 8;
pub const ZIP_RDONLY: u32 = 16;
pub const ZIP_FL_NOCASE: u32 = 1;
pub const ZIP_FL_NODIR: u32 = 2;
pub const ZIP_FL_COMPRESSED: u32 = 4;
pub const ZIP_FL_UNCHANGED: u32 = 8;
pub const ZIP_FL_RECOMPRESS: u32 = 16;
pub const ZIP_FL_ENCRYPTED: u32 = 32;
pub const ZIP_FL_ENC_GUESS: u32 = 0;
pub const ZIP_FL_ENC_RAW: u32 = 64;
pub const ZIP_FL_ENC_STRICT: u32 = 128;
pub const ZIP_FL_LOCAL: u32 = 256;
pub const ZIP_FL_CENTRAL: u32 = 512;
pub const ZIP_FL_ENC_UTF_8: u32 = 2048;
pub const ZIP_FL_ENC_CP437: u32 = 4096;
pub const ZIP_FL_OVERWRITE: u32 = 8192;
pub const ZIP_AFL_RDONLY: u32 = 2;
pub const ZIP_EXTRA_FIELD_ALL: u32 = 65535;
pub const ZIP_EXTRA_FIELD_NEW: u32 = 65535;
pub const ZIP_ER_OK: u32 = 0;
pub const ZIP_ER_MULTIDISK: u32 = 1;
pub const ZIP_ER_RENAME: u32 = 2;
pub const ZIP_ER_CLOSE: u32 = 3;
pub const ZIP_ER_SEEK: u32 = 4;
pub const ZIP_ER_READ: u32 = 5;
pub const ZIP_ER_WRITE: u32 = 6;
pub const ZIP_ER_CRC: u32 = 7;
pub const ZIP_ER_ZIPCLOSED: u32 = 8;
pub const ZIP_ER_NOENT: u32 = 9;
pub const ZIP_ER_EXISTS: u32 = 10;
pub const ZIP_ER_OPEN: u32 = 11;
pub const ZIP_ER_TMPOPEN: u32 = 12;
pub const ZIP_ER_ZLIB: u32 = 13;
pub const ZIP_ER_MEMORY: u32 = 14;
pub const ZIP_ER_CHANGED: u32 = 15;
pub const ZIP_ER_COMPNOTSUPP: u32 = 16;
pub const ZIP_ER_EOF: u32 = 17;
pub const ZIP_ER_INVAL: u32 = 18;
pub const ZIP_ER_NOZIP: u32 = 19;
pub const ZIP_ER_INTERNAL: u32 = 20;
pub const ZIP_ER_INCONS: u32 = 21;
pub const ZIP_ER_REMOVE: u32 = 22;
pub const ZIP_ER_DELETED: u32 = 23;
pub const ZIP_ER_ENCRNOTSUPP: u32 = 24;
pub const ZIP_ER_RDONLY: u32 = 25;
pub const ZIP_ER_NOPASSWD: u32 = 26;
pub const ZIP_ER_WRONGPASSWD: u32 = 27;
pub const ZIP_ER_OPNOTSUPP: u32 = 28;
pub const ZIP_ER_INUSE: u32 = 29;
pub const ZIP_ER_TELL: u32 = 30;
pub const ZIP_ER_COMPRESSED_DATA: u32 = 31;
pub const ZIP_ER_CANCELLED: u32 = 32;
pub const ZIP_ET_NONE: u32 = 0;
pub const ZIP_ET_SYS: u32 = 1;
pub const ZIP_ET_ZLIB: u32 = 2;
pub const ZIP_ET_LIBZIP: u32 = 3;
pub const ZIP_CM_DEFAULT: i32 = -1;
pub const ZIP_CM_STORE: u32 = 0;
pub const ZIP_CM_SHRINK: u32 = 1;
pub const ZIP_CM_REDUCE_1: u32 = 2;
pub const ZIP_CM_REDUCE_2: u32 = 3;
pub const ZIP_CM_REDUCE_3: u32 = 4;
pub const ZIP_CM_REDUCE_4: u32 = 5;
pub const ZIP_CM_IMPLODE: u32 = 6;
pub const ZIP_CM_DEFLATE: u32 = 8;
pub const ZIP_CM_DEFLATE64: u32 = 9;
pub const ZIP_CM_PKWARE_IMPLODE: u32 = 10;
pub const ZIP_CM_BZIP2: u32 = 12;
pub const ZIP_CM_LZMA: u32 = 14;
pub const ZIP_CM_TERSE: u32 = 18;
pub const ZIP_CM_LZ77: u32 = 19;
pub const ZIP_CM_LZMA2: u32 = 33;
pub const ZIP_CM_ZSTD: u32 = 93;
pub const ZIP_CM_XZ: u32 = 95;
pub const ZIP_CM_JPEG: u32 = 96;
pub const ZIP_CM_WAVPACK: u32 = 97;
pub const ZIP_CM_PPMD: u32 = 98;
pub const ZIP_EM_NONE: u32 = 0;
pub const ZIP_EM_TRAD_PKWARE: u32 = 1;
pub const ZIP_EM_AES_128: u32 = 257;
pub const ZIP_EM_AES_192: u32 = 258;
pub const ZIP_EM_AES_256: u32 = 259;
pub const ZIP_EM_UNKNOWN: u32 = 65535;
pub const ZIP_OPSYS_DOS: u32 = 0;
pub const ZIP_OPSYS_AMIGA: u32 = 1;
pub const ZIP_OPSYS_OPENVMS: u32 = 2;
pub const ZIP_OPSYS_UNIX: u32 = 3;
pub const ZIP_OPSYS_VM_CMS: u32 = 4;
pub const ZIP_OPSYS_ATARI_ST: u32 = 5;
pub const ZIP_OPSYS_OS_2: u32 = 6;
pub const ZIP_OPSYS_MACINTOSH: u32 = 7;
pub const ZIP_OPSYS_Z_SYSTEM: u32 = 8;
pub const ZIP_OPSYS_CPM: u32 = 9;
pub const ZIP_OPSYS_WINDOWS_NTFS: u32 = 10;
pub const ZIP_OPSYS_MVS: u32 = 11;
pub const ZIP_OPSYS_VSE: u32 = 12;
pub const ZIP_OPSYS_ACORN_RISC: u32 = 13;
pub const ZIP_OPSYS_VFAT: u32 = 14;
pub const ZIP_OPSYS_ALTERNATE_MVS: u32 = 15;
pub const ZIP_OPSYS_BEOS: u32 = 16;
pub const ZIP_OPSYS_TANDEM: u32 = 17;
pub const ZIP_OPSYS_OS_400: u32 = 18;
pub const ZIP_OPSYS_OS_X: u32 = 19;
pub const ZIP_OPSYS_DEFAULT: u32 = 3;
pub const ZIP_STAT_NAME: u32 = 1;
pub const ZIP_STAT_INDEX: u32 = 2;
pub const ZIP_STAT_SIZE: u32 = 4;
pub const ZIP_STAT_COMP_SIZE: u32 = 8;
pub const ZIP_STAT_MTIME: u32 = 16;
pub const ZIP_STAT_CRC: u32 = 32;
pub const ZIP_STAT_COMP_METHOD: u32 = 64;
pub const ZIP_STAT_ENCRYPTION_METHOD: u32 = 128;
pub const ZIP_STAT_FLAGS: u32 = 256;
pub const ZIP_FILE_ATTRIBUTES_HOST_SYSTEM: u32 = 1;
pub const ZIP_FILE_ATTRIBUTES_ASCII: u32 = 2;
pub const ZIP_FILE_ATTRIBUTES_VERSION_NEEDED: u32 = 4;
pub const ZIP_FILE_ATTRIBUTES_EXTERNAL_FILE_ATTRIBUTES: u32 = 8;
pub const ZIP_FILE_ATTRIBUTES_GENERAL_PURPOSE_BIT_FLAGS: u32 = 16;
pub type va_list = *mut ::std::os::raw::c_char;
extern "C" {
    pub fn __va_start(arg1: *mut *mut ::std::os::raw::c_char, ...);
}
pub type size_t = ::std::os::raw::c_ulonglong;
pub type __vcrt_bool = bool;
pub type wchar_t = ::std::os::raw::c_ushort;
extern "C" {
    pub fn __security_init_cookie();
}
extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize);
}
extern "C" {
    pub static mut __security_cookie: usize;
}
pub type __crt_bool = bool;
extern "C" {
    pub fn _invalid_parameter_noinfo();
}
extern "C" {
    pub fn _invalid_parameter_noinfo_noreturn();
}
extern "C" {
    pub fn _invoke_watson(
        _Expression: *const wchar_t,
        _FunctionName: *const wchar_t,
        _FileName: *const wchar_t,
        _LineNo: ::std::os::raw::c_uint,
        _Reserved: usize,
    );
}
pub type errno_t = ::std::os::raw::c_int;
pub type wint_t = ::std::os::raw::c_ushort;
pub type wctype_t = ::std::os::raw::c_ushort;
pub type __time32_t = ::std::os::raw::c_long;
pub type __time64_t = ::std::os::raw::c_longlong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data_public {
    pub _locale_pctype: *const ::std::os::raw::c_ushort,
    pub _locale_mb_cur_max: ::std::os::raw::c_int,
    pub _locale_lc_codepage: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___crt_locale_data_public() {
    assert_eq!(
        ::std::mem::size_of::<__crt_locale_data_public>(),
        16usize,
        concat!("Size of: ", stringify!(__crt_locale_data_public))
    );
    assert_eq!(
        ::std::mem::align_of::<__crt_locale_data_public>(),
        8usize,
        concat!("Alignment of ", stringify!(__crt_locale_data_public))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__crt_locale_data_public>()))._locale_pctype as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_pctype)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__crt_locale_data_public>()))._locale_mb_cur_max as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_mb_cur_max)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__crt_locale_data_public>()))._locale_lc_codepage as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_lc_codepage)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_pointers {
    pub locinfo: *mut __crt_locale_data,
    pub mbcinfo: *mut __crt_multibyte_data,
}
#[test]
fn bindgen_test_layout___crt_locale_pointers() {
    assert_eq!(
        ::std::mem::size_of::<__crt_locale_pointers>(),
        16usize,
        concat!("Size of: ", stringify!(__crt_locale_pointers))
    );
    assert_eq!(
        ::std::mem::align_of::<__crt_locale_pointers>(),
        8usize,
        concat!("Alignment of ", stringify!(__crt_locale_pointers))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__crt_locale_pointers>())).locinfo as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_pointers),
            "::",
            stringify!(locinfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__crt_locale_pointers>())).mbcinfo as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_pointers),
            "::",
            stringify!(mbcinfo)
        )
    );
}
pub type _locale_t = *mut __crt_locale_pointers;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Mbstatet {
    pub _Wchar: ::std::os::raw::c_ulong,
    pub _Byte: ::std::os::raw::c_ushort,
    pub _State: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout__Mbstatet() {
    assert_eq!(
        ::std::mem::size_of::<_Mbstatet>(),
        8usize,
        concat!("Size of: ", stringify!(_Mbstatet))
    );
    assert_eq!(
        ::std::mem::align_of::<_Mbstatet>(),
        4usize,
        concat!("Alignment of ", stringify!(_Mbstatet))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Mbstatet>()))._Wchar as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_Wchar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Mbstatet>()))._Byte as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_Byte)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Mbstatet>()))._State as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_State)
        )
    );
}
pub type mbstate_t = _Mbstatet;
pub type time_t = __time64_t;
pub type rsize_t = size_t;
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_longlong;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulonglong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_int;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type int_fast64_t = ::std::os::raw::c_longlong;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_uint;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Lldiv_t {
    pub quot: intmax_t,
    pub rem: intmax_t,
}
#[test]
fn bindgen_test_layout__Lldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<_Lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(_Lldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_Lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_Lldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Lldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_Lldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Lldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_Lldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
pub type imaxdiv_t = _Lldiv_t;
extern "C" {
    pub fn imaxabs(_Number: intmax_t) -> intmax_t;
}
extern "C" {
    pub fn imaxdiv(_Numerator: intmax_t, _Denominator: intmax_t) -> imaxdiv_t;
}
extern "C" {
    pub fn strtoimax(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn _strtoimax_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> intmax_t;
}
extern "C" {
    pub fn strtoumax(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
extern "C" {
    pub fn _strtoumax_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> uintmax_t;
}
extern "C" {
    pub fn wcstoimax(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn _wcstoimax_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> intmax_t;
}
extern "C" {
    pub fn wcstoumax(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
extern "C" {
    pub fn _wcstoumax_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> uintmax_t;
}
pub type zip_int8_t = i8;
pub type zip_uint8_t = u8;
pub type zip_int16_t = i16;
pub type zip_uint16_t = u16;
pub type zip_int32_t = i32;
pub type zip_uint32_t = u32;
pub type zip_int64_t = i64;
pub type zip_uint64_t = u64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _iobuf {
    pub _Placeholder: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__iobuf() {
    assert_eq!(
        ::std::mem::size_of::<_iobuf>(),
        8usize,
        concat!("Size of: ", stringify!(_iobuf))
    );
    assert_eq!(
        ::std::mem::align_of::<_iobuf>(),
        8usize,
        concat!("Alignment of ", stringify!(_iobuf))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_iobuf>()))._Placeholder as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_iobuf),
            "::",
            stringify!(_Placeholder)
        )
    );
}
pub type FILE = _iobuf;
extern "C" {
    pub fn __acrt_iob_func(_Ix: ::std::os::raw::c_uint) -> *mut FILE;
}
extern "C" {
    pub fn fgetwc(_Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _fgetwchar() -> wint_t;
}
extern "C" {
    pub fn fputwc(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _fputwchar(_Character: wchar_t) -> wint_t;
}
extern "C" {
    pub fn getwc(_Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn getwchar() -> wint_t;
}
extern "C" {
    pub fn fgetws(
        _Buffer: *mut wchar_t,
        _BufferCount: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn fputws(_Buffer: *const wchar_t, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _getws_s(_Buffer: *mut wchar_t, _BufferCount: size_t) -> *mut wchar_t;
}
extern "C" {
    pub fn putwc(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn putwchar(_Character: wchar_t) -> wint_t;
}
extern "C" {
    pub fn _putws(_Buffer: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetwc(_Character: wint_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _wfdopen(_FileHandle: ::std::os::raw::c_int, _Mode: *const wchar_t) -> *mut FILE;
}
extern "C" {
    pub fn _wfopen(_FileName: *const wchar_t, _Mode: *const wchar_t) -> *mut FILE;
}
extern "C" {
    pub fn _wfopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const wchar_t,
        _Mode: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wfreopen(
        _FileName: *const wchar_t,
        _Mode: *const wchar_t,
        _OldStream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn _wfreopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const wchar_t,
        _Mode: *const wchar_t,
        _OldStream: *mut FILE,
    ) -> errno_t;
}
extern "C" {
    pub fn _wfsopen(
        _FileName: *const wchar_t,
        _Mode: *const wchar_t,
        _ShFlag: ::std::os::raw::c_int,
    ) -> *mut FILE;
}
extern "C" {
    pub fn _wperror(_ErrorMessage: *const wchar_t);
}
extern "C" {
    pub fn _wpopen(_Command: *const wchar_t, _Mode: *const wchar_t) -> *mut FILE;
}
extern "C" {
    pub fn _wremove(_FileName: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wtempnam(_Directory: *const wchar_t, _FilePrefix: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wtmpnam_s(_Buffer: *mut wchar_t, _BufferCount: size_t) -> errno_t;
}
extern "C" {
    pub fn _wtmpnam(_Buffer: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _fgetwc_nolock(_Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _fputwc_nolock(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _getwc_nolock(_Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _putwc_nolock(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _ungetwc_nolock(_Character: wint_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn __stdio_common_vfwprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfwprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfwprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfwscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vswprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vswprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsnwprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _MaxCount: size_t,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vswprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vswscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *const wchar_t,
        _BufferCount: size_t,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
pub type fpos_t = ::std::os::raw::c_longlong;
extern "C" {
    pub fn _get_stream_buffer_pointers(
        _Stream: *mut FILE,
        _Base: *mut *mut *mut ::std::os::raw::c_char,
        _Pointer: *mut *mut *mut ::std::os::raw::c_char,
        _Count: *mut *mut ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn clearerr_s(_Stream: *mut FILE) -> errno_t;
}
extern "C" {
    pub fn fopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn fread_s(
        _Buffer: *mut ::std::os::raw::c_void,
        _BufferSize: size_t,
        _ElementSize: size_t,
        _ElementCount: size_t,
        _Stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn freopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
        _OldStream: *mut FILE,
    ) -> errno_t;
}
extern "C" {
    pub fn gets_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _Size: rsize_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpfile_s(_Stream: *mut *mut FILE) -> errno_t;
}
extern "C" {
    pub fn tmpnam_s(_Buffer: *mut ::std::os::raw::c_char, _Size: rsize_t) -> errno_t;
}
extern "C" {
    pub fn clearerr(_Stream: *mut FILE);
}
extern "C" {
    pub fn fclose(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fcloseall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fdopen(
        _FileHandle: ::std::os::raw::c_int,
        _Mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn feof(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fgetchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetpos(_Stream: *mut FILE, _Position: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        _Buffer: *mut ::std::os::raw::c_char,
        _MaxCount: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _fileno(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _flushall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fputc(_Character: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fputchar(_Character: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputs(
        _Buffer: *const ::std::os::raw::c_char,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        _Buffer: *mut ::std::os::raw::c_void,
        _ElementSize: ::std::os::raw::c_ulonglong,
        _ElementCount: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn freopen(
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
        _Stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn _fsopen(
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
        _ShFlag: ::std::os::raw::c_int,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fsetpos(_Stream: *mut FILE, _Position: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fseek(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_long,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fseeki64(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_longlong,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(_Stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _ftelli64(_Stream: *mut FILE) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fwrite(
        _Buffer: *const ::std::os::raw::c_void,
        _ElementSize: ::std::os::raw::c_ulonglong,
        _ElementCount: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn getc(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _getmaxstdio() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _getw(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(_ErrorMessage: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn _pclose(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _popen(
        _Command: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn putc(_Character: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(_Character: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(_Buffer: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _putw(_Word: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn remove(_FileName: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        _OldFileName: *const ::std::os::raw::c_char,
        _NewFileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _unlink(_FileName: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unlink(_FileName: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rewind(_Stream: *mut FILE);
}
extern "C" {
    pub fn _rmtmp() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuf(_Stream: *mut FILE, _Buffer: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn _setmaxstdio(_Maximum: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setvbuf(
        _Stream: *mut FILE,
        _Buffer: *mut ::std::os::raw::c_char,
        _Mode: ::std::os::raw::c_int,
        _Size: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _tempnam(
        _DirectoryName: *const ::std::os::raw::c_char,
        _FilePrefix: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(_Buffer: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ungetc(_Character: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _lock_file(_Stream: *mut FILE);
}
extern "C" {
    pub fn _unlock_file(_Stream: *mut FILE);
}
extern "C" {
    pub fn _fclose_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fflush_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fgetc_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fputc_nolock(
        _Character: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fread_nolock(
        _Buffer: *mut ::std::os::raw::c_void,
        _ElementSize: size_t,
        _ElementCount: size_t,
        _Stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn _fread_nolock_s(
        _Buffer: *mut ::std::os::raw::c_void,
        _BufferSize: size_t,
        _ElementSize: size_t,
        _ElementCount: size_t,
        _Stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn _fseek_nolock(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_long,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fseeki64_nolock(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_longlong,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _ftell_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _ftelli64_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _fwrite_nolock(
        _Buffer: *const ::std::os::raw::c_void,
        _ElementSize: size_t,
        _ElementCount: size_t,
        _Stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn _getc_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _putc_nolock(
        _Character: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _ungetc_nolock(
        _Character: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __p__commode() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _set_printf_count_output(_Value: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _get_printf_count_output() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _Arglist: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsnprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _MaxCount: size_t,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *const ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tempnam(
        _Directory: *const ::std::os::raw::c_char,
        _FilePrefix: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcloseall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fdopen(
        _FileHandle: ::std::os::raw::c_int,
        _Format: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fgetchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flushall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputchar(_Ch: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(_Ch: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rmtmp() -> ::std::os::raw::c_int;
}
pub type _ino_t = ::std::os::raw::c_ushort;
pub type ino_t = _ino_t;
pub type _dev_t = ::std::os::raw::c_uint;
pub type dev_t = _dev_t;
pub type _off_t = ::std::os::raw::c_long;
pub type off_t = _off_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_tm() {
    assert_eq!(
        ::std::mem::size_of::<tm>(),
        36usize,
        concat!("Size of: ", stringify!(tm))
    );
    assert_eq!(
        ::std::mem::align_of::<tm>(),
        4usize,
        concat!("Alignment of ", stringify!(tm))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_min as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_hour as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_hour)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_mday as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_mon as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mon)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_year as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_year)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_wday as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_wday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_yday as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_yday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_isdst as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_isdst)
        )
    );
}
extern "C" {
    pub fn _wasctime(_Tm: *const tm) -> *mut wchar_t;
}
extern "C" {
    pub fn _wasctime_s(_Buffer: *mut wchar_t, _SizeInWords: size_t, _Tm: *const tm) -> errno_t;
}
extern "C" {
    pub fn wcsftime(
        _Buffer: *mut wchar_t,
        _SizeInWords: size_t,
        _Format: *const wchar_t,
        _Tm: *const tm,
    ) -> size_t;
}
extern "C" {
    pub fn _wcsftime_l(
        _Buffer: *mut wchar_t,
        _SizeInWords: size_t,
        _Format: *const wchar_t,
        _Tm: *const tm,
        _Locale: _locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn _wctime32(_Time: *const __time32_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wctime32_s(
        _Buffer: *mut wchar_t,
        _SizeInWords: size_t,
        _Time: *const __time32_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wctime64(_Time: *const __time64_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wctime64_s(
        _Buffer: *mut wchar_t,
        _SizeInWords: size_t,
        _Time: *const __time64_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wstrdate_s(_Buffer: *mut wchar_t, _SizeInWords: size_t) -> errno_t;
}
extern "C" {
    pub fn _wstrdate(_Buffer: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wstrtime_s(_Buffer: *mut wchar_t, _SizeInWords: size_t) -> errno_t;
}
extern "C" {
    pub fn _wstrtime(_Buffer: *mut wchar_t) -> *mut wchar_t;
}
pub type clock_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _timespec32 {
    pub tv_sec: __time32_t,
    pub tv_nsec: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout__timespec32() {
    assert_eq!(
        ::std::mem::size_of::<_timespec32>(),
        8usize,
        concat!("Size of: ", stringify!(_timespec32))
    );
    assert_eq!(
        ::std::mem::align_of::<_timespec32>(),
        4usize,
        concat!("Alignment of ", stringify!(_timespec32))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_timespec32>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_timespec32),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_timespec32>())).tv_nsec as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_timespec32),
            "::",
            stringify!(tv_nsec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _timespec64 {
    pub tv_sec: __time64_t,
    pub tv_nsec: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout__timespec64() {
    assert_eq!(
        ::std::mem::size_of::<_timespec64>(),
        16usize,
        concat!("Size of: ", stringify!(_timespec64))
    );
    assert_eq!(
        ::std::mem::align_of::<_timespec64>(),
        8usize,
        concat!("Alignment of ", stringify!(_timespec64))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_timespec64>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_timespec64),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_timespec64>())).tv_nsec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_timespec64),
            "::",
            stringify!(tv_nsec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: time_t,
    pub tv_nsec: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_nsec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
extern "C" {
    pub fn __daylight() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn __dstbias() -> *mut ::std::os::raw::c_long;
}
extern "C" {
    pub fn __timezone() -> *mut ::std::os::raw::c_long;
}
extern "C" {
    pub fn __tzname() -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _get_daylight(_Daylight: *mut ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn _get_dstbias(_DaylightSavingsBias: *mut ::std::os::raw::c_long) -> errno_t;
}
extern "C" {
    pub fn _get_timezone(_TimeZone: *mut ::std::os::raw::c_long) -> errno_t;
}
extern "C" {
    pub fn _get_tzname(
        _ReturnValue: *mut size_t,
        _Buffer: *mut ::std::os::raw::c_char,
        _SizeInBytes: size_t,
        _Index: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn asctime(_Tm: *const tm) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn asctime_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _SizeInBytes: size_t,
        _Tm: *const tm,
    ) -> errno_t;
}
extern "C" {
    pub fn clock() -> clock_t;
}
extern "C" {
    pub fn _ctime32(_Time: *const __time32_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _ctime32_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _SizeInBytes: size_t,
        _Time: *const __time32_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _ctime64(_Time: *const __time64_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _ctime64_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _SizeInBytes: size_t,
        _Time: *const __time64_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _difftime32(_Time1: __time32_t, _Time2: __time32_t) -> f64;
}
extern "C" {
    pub fn _difftime64(_Time1: __time64_t, _Time2: __time64_t) -> f64;
}
extern "C" {
    pub fn _gmtime32(_Time: *const __time32_t) -> *mut tm;
}
extern "C" {
    pub fn _gmtime32_s(_Tm: *mut tm, _Time: *const __time32_t) -> errno_t;
}
extern "C" {
    pub fn _gmtime64(_Time: *const __time64_t) -> *mut tm;
}
extern "C" {
    pub fn _gmtime64_s(_Tm: *mut tm, _Time: *const __time64_t) -> errno_t;
}
extern "C" {
    pub fn _localtime32(_Time: *const __time32_t) -> *mut tm;
}
extern "C" {
    pub fn _localtime32_s(_Tm: *mut tm, _Time: *const __time32_t) -> errno_t;
}
extern "C" {
    pub fn _localtime64(_Time: *const __time64_t) -> *mut tm;
}
extern "C" {
    pub fn _localtime64_s(_Tm: *mut tm, _Time: *const __time64_t) -> errno_t;
}
extern "C" {
    pub fn _mkgmtime32(_Tm: *mut tm) -> __time32_t;
}
extern "C" {
    pub fn _mkgmtime64(_Tm: *mut tm) -> __time64_t;
}
extern "C" {
    pub fn _mktime32(_Tm: *mut tm) -> __time32_t;
}
extern "C" {
    pub fn _mktime64(_Tm: *mut tm) -> __time64_t;
}
extern "C" {
    pub fn strftime(
        _Buffer: *mut ::std::os::raw::c_char,
        _SizeInBytes: size_t,
        _Format: *const ::std::os::raw::c_char,
        _Tm: *const tm,
    ) -> size_t;
}
extern "C" {
    pub fn _strftime_l(
        _Buffer: *mut ::std::os::raw::c_char,
        _MaxSize: size_t,
        _Format: *const ::std::os::raw::c_char,
        _Tm: *const tm,
        _Locale: _locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn _strdate_s(_Buffer: *mut ::std::os::raw::c_char, _SizeInBytes: size_t) -> errno_t;
}
extern "C" {
    pub fn _strdate(_Buffer: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _strtime_s(_Buffer: *mut ::std::os::raw::c_char, _SizeInBytes: size_t) -> errno_t;
}
extern "C" {
    pub fn _strtime(_Buffer: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _time32(_Time: *mut __time32_t) -> __time32_t;
}
extern "C" {
    pub fn _time64(_Time: *mut __time64_t) -> __time64_t;
}
extern "C" {
    pub fn _timespec32_get(
        _Ts: *mut _timespec32,
        _Base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _timespec64_get(
        _Ts: *mut _timespec64,
        _Base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _tzset();
}
extern "C" {
    pub fn _getsystime(_Tm: *mut tm) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _setsystime(
        _Tm: *mut tm,
        _Milliseconds: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn tzset();
}
pub const zip_source_cmd_ZIP_SOURCE_OPEN: zip_source_cmd = 0;
pub const zip_source_cmd_ZIP_SOURCE_READ: zip_source_cmd = 1;
pub const zip_source_cmd_ZIP_SOURCE_CLOSE: zip_source_cmd = 2;
pub const zip_source_cmd_ZIP_SOURCE_STAT: zip_source_cmd = 3;
pub const zip_source_cmd_ZIP_SOURCE_ERROR: zip_source_cmd = 4;
pub const zip_source_cmd_ZIP_SOURCE_FREE: zip_source_cmd = 5;
pub const zip_source_cmd_ZIP_SOURCE_SEEK: zip_source_cmd = 6;
pub const zip_source_cmd_ZIP_SOURCE_TELL: zip_source_cmd = 7;
pub const zip_source_cmd_ZIP_SOURCE_BEGIN_WRITE: zip_source_cmd = 8;
pub const zip_source_cmd_ZIP_SOURCE_COMMIT_WRITE: zip_source_cmd = 9;
pub const zip_source_cmd_ZIP_SOURCE_ROLLBACK_WRITE: zip_source_cmd = 10;
pub const zip_source_cmd_ZIP_SOURCE_WRITE: zip_source_cmd = 11;
pub const zip_source_cmd_ZIP_SOURCE_SEEK_WRITE: zip_source_cmd = 12;
pub const zip_source_cmd_ZIP_SOURCE_TELL_WRITE: zip_source_cmd = 13;
pub const zip_source_cmd_ZIP_SOURCE_SUPPORTS: zip_source_cmd = 14;
pub const zip_source_cmd_ZIP_SOURCE_REMOVE: zip_source_cmd = 15;
pub const zip_source_cmd_ZIP_SOURCE_RESERVED_1: zip_source_cmd = 16;
pub const zip_source_cmd_ZIP_SOURCE_BEGIN_WRITE_CLONING: zip_source_cmd = 17;
pub const zip_source_cmd_ZIP_SOURCE_ACCEPT_EMPTY: zip_source_cmd = 18;
pub const zip_source_cmd_ZIP_SOURCE_GET_FILE_ATTRIBUTES: zip_source_cmd = 19;
pub type zip_source_cmd = ::std::os::raw::c_int;
pub use self::zip_source_cmd as zip_source_cmd_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct zip_source_args_seek {
    pub offset: zip_int64_t,
    pub whence: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_zip_source_args_seek() {
    assert_eq!(
        ::std::mem::size_of::<zip_source_args_seek>(),
        16usize,
        concat!("Size of: ", stringify!(zip_source_args_seek))
    );
    assert_eq!(
        ::std::mem::align_of::<zip_source_args_seek>(),
        8usize,
        concat!("Alignment of ", stringify!(zip_source_args_seek))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zip_source_args_seek>())).offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(zip_source_args_seek),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zip_source_args_seek>())).whence as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(zip_source_args_seek),
            "::",
            stringify!(whence)
        )
    );
}
pub type zip_source_args_seek_t = zip_source_args_seek;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct zip_error {
    pub zip_err: ::std::os::raw::c_int,
    pub sys_err: ::std::os::raw::c_int,
    pub str_: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_zip_error() {
    assert_eq!(
        ::std::mem::size_of::<zip_error>(),
        16usize,
        concat!("Size of: ", stringify!(zip_error))
    );
    assert_eq!(
        ::std::mem::align_of::<zip_error>(),
        8usize,
        concat!("Alignment of ", stringify!(zip_error))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zip_error>())).zip_err as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(zip_error),
            "::",
            stringify!(zip_err)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zip_error>())).sys_err as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(zip_error),
            "::",
            stringify!(sys_err)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zip_error>())).str_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(zip_error),
            "::",
            stringify!(str_)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct zip_stat {
    pub valid: zip_uint64_t,
    pub name: *const ::std::os::raw::c_char,
    pub index: zip_uint64_t,
    pub size: zip_uint64_t,
    pub comp_size: zip_uint64_t,
    pub mtime: time_t,
    pub crc: zip_uint32_t,
    pub comp_method: zip_uint16_t,
    pub encryption_method: zip_uint16_t,
    pub flags: zip_uint32_t,
}
#[test]
fn bindgen_test_layout_zip_stat() {
    assert_eq!(
        ::std::mem::size_of::<zip_stat>(),
        64usize,
        concat!("Size of: ", stringify!(zip_stat))
    );
    assert_eq!(
        ::std::mem::align_of::<zip_stat>(),
        8usize,
        concat!("Alignment of ", stringify!(zip_stat))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zip_stat>())).valid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(zip_stat),
            "::",
            stringify!(valid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zip_stat>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(zip_stat),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zip_stat>())).index as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(zip_stat),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zip_stat>())).size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(zip_stat),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zip_stat>())).comp_size as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(zip_stat),
            "::",
            stringify!(comp_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zip_stat>())).mtime as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(zip_stat),
            "::",
            stringify!(mtime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zip_stat>())).crc as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(zip_stat),
            "::",
            stringify!(crc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zip_stat>())).comp_method as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(zip_stat),
            "::",
            stringify!(comp_method)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zip_stat>())).encryption_method as *const _ as usize },
        54usize,
        concat!(
            "Offset of field: ",
            stringify!(zip_stat),
            "::",
            stringify!(encryption_method)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zip_stat>())).flags as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(zip_stat),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct zip_buffer_fragment {
    pub data: *mut zip_uint8_t,
    pub length: zip_uint64_t,
}
#[test]
fn bindgen_test_layout_zip_buffer_fragment() {
    assert_eq!(
        ::std::mem::size_of::<zip_buffer_fragment>(),
        16usize,
        concat!("Size of: ", stringify!(zip_buffer_fragment))
    );
    assert_eq!(
        ::std::mem::align_of::<zip_buffer_fragment>(),
        8usize,
        concat!("Alignment of ", stringify!(zip_buffer_fragment))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zip_buffer_fragment>())).data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(zip_buffer_fragment),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zip_buffer_fragment>())).length as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(zip_buffer_fragment),
            "::",
            stringify!(length)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct zip_file_attributes {
    pub valid: zip_uint64_t,
    pub version: zip_uint8_t,
    pub host_system: zip_uint8_t,
    pub ascii: zip_uint8_t,
    pub version_needed: zip_uint8_t,
    pub external_file_attributes: zip_uint32_t,
    pub general_purpose_bit_flags: zip_uint16_t,
    pub general_purpose_bit_mask: zip_uint16_t,
}
#[test]
fn bindgen_test_layout_zip_file_attributes() {
    assert_eq!(
        ::std::mem::size_of::<zip_file_attributes>(),
        24usize,
        concat!("Size of: ", stringify!(zip_file_attributes))
    );
    assert_eq!(
        ::std::mem::align_of::<zip_file_attributes>(),
        8usize,
        concat!("Alignment of ", stringify!(zip_file_attributes))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zip_file_attributes>())).valid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(zip_file_attributes),
            "::",
            stringify!(valid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zip_file_attributes>())).version as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(zip_file_attributes),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zip_file_attributes>())).host_system as *const _ as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(zip_file_attributes),
            "::",
            stringify!(host_system)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zip_file_attributes>())).ascii as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(zip_file_attributes),
            "::",
            stringify!(ascii)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<zip_file_attributes>())).version_needed as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(zip_file_attributes),
            "::",
            stringify!(version_needed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<zip_file_attributes>())).external_file_attributes as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(zip_file_attributes),
            "::",
            stringify!(external_file_attributes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<zip_file_attributes>())).general_purpose_bit_flags as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(zip_file_attributes),
            "::",
            stringify!(general_purpose_bit_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<zip_file_attributes>())).general_purpose_bit_mask as *const _
                as usize
        },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(zip_file_attributes),
            "::",
            stringify!(general_purpose_bit_mask)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct zip {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct zip_file {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct zip_source {
    _unused: [u8; 0],
}
pub type zip_t = zip;
pub type zip_error_t = zip_error;
pub type zip_file_t = zip_file;
pub type zip_file_attributes_t = zip_file_attributes;
pub type zip_source_t = zip_source;
pub type zip_stat_t = zip_stat;
pub type zip_buffer_fragment_t = zip_buffer_fragment;
pub type zip_flags_t = zip_uint32_t;
pub type zip_source_callback = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
        arg3: zip_uint64_t,
        arg4: zip_source_cmd_t,
    ) -> zip_int64_t,
>;
pub type zip_progress_callback = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut zip_t, arg2: f64, arg3: *mut ::std::os::raw::c_void),
>;
pub type zip_cancel_callback = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut zip_t,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type zip_progress_callback_t = ::std::option::Option<unsafe extern "C" fn(arg1: f64)>;
extern "C" {
    pub fn zip_register_progress_callback(arg1: *mut zip_t, arg2: zip_progress_callback_t);
}
extern "C" {
    pub fn zip_add(
        arg1: *mut zip_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut zip_source_t,
    ) -> zip_int64_t;
}
extern "C" {
    pub fn zip_add_dir(arg1: *mut zip_t, arg2: *const ::std::os::raw::c_char) -> zip_int64_t;
}
extern "C" {
    pub fn zip_get_file_comment(
        arg1: *mut zip_t,
        arg2: zip_uint64_t,
        arg3: *mut ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn zip_get_num_files(arg1: *mut zip_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zip_rename(
        arg1: *mut zip_t,
        arg2: zip_uint64_t,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zip_replace(
        arg1: *mut zip_t,
        arg2: zip_uint64_t,
        arg3: *mut zip_source_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zip_set_file_comment(
        arg1: *mut zip_t,
        arg2: zip_uint64_t,
        arg3: *const ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zip_error_get_sys_type(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zip_error_get(
        arg1: *mut zip_t,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn zip_error_to_str(
        arg1: *mut ::std::os::raw::c_char,
        arg2: zip_uint64_t,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zip_file_error_get(
        arg1: *mut zip_file_t,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn zip_close(arg1: *mut zip_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zip_delete(arg1: *mut zip_t, arg2: zip_uint64_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zip_dir_add(
        arg1: *mut zip_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: zip_flags_t,
    ) -> zip_int64_t;
}
extern "C" {
    pub fn zip_discard(arg1: *mut zip_t);
}
extern "C" {
    pub fn zip_get_error(arg1: *mut zip_t) -> *mut zip_error_t;
}
extern "C" {
    pub fn zip_error_clear(arg1: *mut zip_t);
}
extern "C" {
    pub fn zip_error_code_zip(arg1: *const zip_error_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zip_error_code_system(arg1: *const zip_error_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zip_error_fini(arg1: *mut zip_error_t);
}
extern "C" {
    pub fn zip_error_init(arg1: *mut zip_error_t);
}
extern "C" {
    pub fn zip_error_init_with_code(arg1: *mut zip_error_t, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn zip_error_set(
        arg1: *mut zip_error_t,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn zip_error_strerror(arg1: *mut zip_error_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn zip_error_system_type(arg1: *const zip_error_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zip_error_to_data(
        arg1: *const zip_error_t,
        arg2: *mut ::std::os::raw::c_void,
        arg3: zip_uint64_t,
    ) -> zip_int64_t;
}
extern "C" {
    pub fn zip_fclose(arg1: *mut zip_file_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zip_fdopen(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
    ) -> *mut zip_t;
}
extern "C" {
    pub fn zip_file_add(
        arg1: *mut zip_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut zip_source_t,
        arg4: zip_flags_t,
    ) -> zip_int64_t;
}
extern "C" {
    pub fn zip_file_attributes_init(arg1: *mut zip_file_attributes_t);
}
extern "C" {
    pub fn zip_file_error_clear(arg1: *mut zip_file_t);
}
extern "C" {
    pub fn zip_file_extra_field_delete(
        arg1: *mut zip_t,
        arg2: zip_uint64_t,
        arg3: zip_uint16_t,
        arg4: zip_flags_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zip_file_extra_field_delete_by_id(
        arg1: *mut zip_t,
        arg2: zip_uint64_t,
        arg3: zip_uint16_t,
        arg4: zip_uint16_t,
        arg5: zip_flags_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zip_file_extra_field_set(
        arg1: *mut zip_t,
        arg2: zip_uint64_t,
        arg3: zip_uint16_t,
        arg4: zip_uint16_t,
        arg5: *const zip_uint8_t,
        arg6: zip_uint16_t,
        arg7: zip_flags_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zip_file_extra_fields_count(
        arg1: *mut zip_t,
        arg2: zip_uint64_t,
        arg3: zip_flags_t,
    ) -> zip_int16_t;
}
extern "C" {
    pub fn zip_file_extra_fields_count_by_id(
        arg1: *mut zip_t,
        arg2: zip_uint64_t,
        arg3: zip_uint16_t,
        arg4: zip_flags_t,
    ) -> zip_int16_t;
}
extern "C" {
    pub fn zip_file_extra_field_get(
        arg1: *mut zip_t,
        arg2: zip_uint64_t,
        arg3: zip_uint16_t,
        arg4: *mut zip_uint16_t,
        arg5: *mut zip_uint16_t,
        arg6: zip_flags_t,
    ) -> *const zip_uint8_t;
}
extern "C" {
    pub fn zip_file_extra_field_get_by_id(
        arg1: *mut zip_t,
        arg2: zip_uint64_t,
        arg3: zip_uint16_t,
        arg4: zip_uint16_t,
        arg5: *mut zip_uint16_t,
        arg6: zip_flags_t,
    ) -> *const zip_uint8_t;
}
extern "C" {
    pub fn zip_file_get_comment(
        arg1: *mut zip_t,
        arg2: zip_uint64_t,
        arg3: *mut zip_uint32_t,
        arg4: zip_flags_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn zip_file_get_error(arg1: *mut zip_file_t) -> *mut zip_error_t;
}
extern "C" {
    pub fn zip_file_get_external_attributes(
        arg1: *mut zip_t,
        arg2: zip_uint64_t,
        arg3: zip_flags_t,
        arg4: *mut zip_uint8_t,
        arg5: *mut zip_uint32_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zip_file_rename(
        arg1: *mut zip_t,
        arg2: zip_uint64_t,
        arg3: *const ::std::os::raw::c_char,
        arg4: zip_flags_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zip_file_replace(
        arg1: *mut zip_t,
        arg2: zip_uint64_t,
        arg3: *mut zip_source_t,
        arg4: zip_flags_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zip_file_set_comment(
        arg1: *mut zip_t,
        arg2: zip_uint64_t,
        arg3: *const ::std::os::raw::c_char,
        arg4: zip_uint16_t,
        arg5: zip_flags_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zip_file_set_dostime(
        arg1: *mut zip_t,
        arg2: zip_uint64_t,
        arg3: zip_uint16_t,
        arg4: zip_uint16_t,
        arg5: zip_flags_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zip_file_set_encryption(
        arg1: *mut zip_t,
        arg2: zip_uint64_t,
        arg3: zip_uint16_t,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zip_file_set_external_attributes(
        arg1: *mut zip_t,
        arg2: zip_uint64_t,
        arg3: zip_flags_t,
        arg4: zip_uint8_t,
        arg5: zip_uint32_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zip_file_set_mtime(
        arg1: *mut zip_t,
        arg2: zip_uint64_t,
        arg3: time_t,
        arg4: zip_flags_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zip_file_strerror(arg1: *mut zip_file_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn zip_fopen(
        arg1: *mut zip_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: zip_flags_t,
    ) -> *mut zip_file_t;
}
extern "C" {
    pub fn zip_fopen_encrypted(
        arg1: *mut zip_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: zip_flags_t,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut zip_file_t;
}
extern "C" {
    pub fn zip_fopen_index(
        arg1: *mut zip_t,
        arg2: zip_uint64_t,
        arg3: zip_flags_t,
    ) -> *mut zip_file_t;
}
extern "C" {
    pub fn zip_fopen_index_encrypted(
        arg1: *mut zip_t,
        arg2: zip_uint64_t,
        arg3: zip_flags_t,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut zip_file_t;
}
extern "C" {
    pub fn zip_fread(
        arg1: *mut zip_file_t,
        arg2: *mut ::std::os::raw::c_void,
        arg3: zip_uint64_t,
    ) -> zip_int64_t;
}
extern "C" {
    pub fn zip_fseek(
        arg1: *mut zip_file_t,
        arg2: zip_int64_t,
        arg3: ::std::os::raw::c_int,
    ) -> zip_int8_t;
}
extern "C" {
    pub fn zip_ftell(arg1: *mut zip_file_t) -> zip_int64_t;
}
extern "C" {
    pub fn zip_get_archive_comment(
        arg1: *mut zip_t,
        arg2: *mut ::std::os::raw::c_int,
        arg3: zip_flags_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn zip_get_archive_flag(
        arg1: *mut zip_t,
        arg2: zip_flags_t,
        arg3: zip_flags_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zip_get_name(
        arg1: *mut zip_t,
        arg2: zip_uint64_t,
        arg3: zip_flags_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn zip_get_num_entries(arg1: *mut zip_t, arg2: zip_flags_t) -> zip_int64_t;
}
extern "C" {
    pub fn zip_libzip_version() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn zip_name_locate(
        arg1: *mut zip_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: zip_flags_t,
    ) -> zip_int64_t;
}
extern "C" {
    pub fn zip_open(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
    ) -> *mut zip_t;
}
extern "C" {
    pub fn zip_open_from_source(
        arg1: *mut zip_source_t,
        arg2: ::std::os::raw::c_int,
        arg3: *mut zip_error_t,
    ) -> *mut zip_t;
}
extern "C" {
    pub fn zip_register_progress_callback_with_state(
        arg1: *mut zip_t,
        arg2: f64,
        arg3: zip_progress_callback,
        arg4: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
        arg5: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zip_register_cancel_callback_with_state(
        arg1: *mut zip_t,
        arg2: zip_cancel_callback,
        arg3: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
        arg4: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zip_set_archive_comment(
        arg1: *mut zip_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: zip_uint16_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zip_set_archive_flag(
        arg1: *mut zip_t,
        arg2: zip_flags_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zip_set_default_password(
        arg1: *mut zip_t,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zip_set_file_compression(
        arg1: *mut zip_t,
        arg2: zip_uint64_t,
        arg3: zip_int32_t,
        arg4: zip_uint32_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zip_source_begin_write(arg1: *mut zip_source_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zip_source_begin_write_cloning(
        arg1: *mut zip_source_t,
        arg2: zip_uint64_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zip_source_buffer(
        arg1: *mut zip_t,
        arg2: *const ::std::os::raw::c_void,
        arg3: zip_uint64_t,
        arg4: ::std::os::raw::c_int,
    ) -> *mut zip_source_t;
}
extern "C" {
    pub fn zip_source_buffer_create(
        arg1: *const ::std::os::raw::c_void,
        arg2: zip_uint64_t,
        arg3: ::std::os::raw::c_int,
        arg4: *mut zip_error_t,
    ) -> *mut zip_source_t;
}
extern "C" {
    pub fn zip_source_buffer_fragment(
        arg1: *mut zip_t,
        arg2: *const zip_buffer_fragment_t,
        arg3: zip_uint64_t,
        arg4: ::std::os::raw::c_int,
    ) -> *mut zip_source_t;
}
extern "C" {
    pub fn zip_source_buffer_fragment_create(
        arg1: *const zip_buffer_fragment_t,
        arg2: zip_uint64_t,
        arg3: ::std::os::raw::c_int,
        arg4: *mut zip_error_t,
    ) -> *mut zip_source_t;
}
extern "C" {
    pub fn zip_source_close(arg1: *mut zip_source_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zip_source_commit_write(arg1: *mut zip_source_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zip_source_error(arg1: *mut zip_source_t) -> *mut zip_error_t;
}
extern "C" {
    pub fn zip_source_file(
        arg1: *mut zip_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: zip_uint64_t,
        arg4: zip_int64_t,
    ) -> *mut zip_source_t;
}
extern "C" {
    pub fn zip_source_file_create(
        arg1: *const ::std::os::raw::c_char,
        arg2: zip_uint64_t,
        arg3: zip_int64_t,
        arg4: *mut zip_error_t,
    ) -> *mut zip_source_t;
}
extern "C" {
    pub fn zip_source_filep(
        arg1: *mut zip_t,
        arg2: *mut FILE,
        arg3: zip_uint64_t,
        arg4: zip_int64_t,
    ) -> *mut zip_source_t;
}
extern "C" {
    pub fn zip_source_filep_create(
        arg1: *mut FILE,
        arg2: zip_uint64_t,
        arg3: zip_int64_t,
        arg4: *mut zip_error_t,
    ) -> *mut zip_source_t;
}
extern "C" {
    pub fn zip_source_free(arg1: *mut zip_source_t);
}
extern "C" {
    pub fn zip_source_function(
        arg1: *mut zip_t,
        arg2: zip_source_callback,
        arg3: *mut ::std::os::raw::c_void,
    ) -> *mut zip_source_t;
}
extern "C" {
    pub fn zip_source_function_create(
        arg1: zip_source_callback,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut zip_error_t,
    ) -> *mut zip_source_t;
}
extern "C" {
    pub fn zip_source_get_file_attributes(
        arg1: *mut zip_source_t,
        arg2: *mut zip_file_attributes_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zip_source_is_deleted(arg1: *mut zip_source_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zip_source_keep(arg1: *mut zip_source_t);
}
extern "C" {
    pub fn zip_source_make_command_bitmap(arg1: zip_source_cmd_t, ...) -> zip_int64_t;
}
extern "C" {
    pub fn zip_source_open(arg1: *mut zip_source_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zip_source_read(
        arg1: *mut zip_source_t,
        arg2: *mut ::std::os::raw::c_void,
        arg3: zip_uint64_t,
    ) -> zip_int64_t;
}
extern "C" {
    pub fn zip_source_rollback_write(arg1: *mut zip_source_t);
}
extern "C" {
    pub fn zip_source_seek(
        arg1: *mut zip_source_t,
        arg2: zip_int64_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zip_source_seek_compute_offset(
        arg1: zip_uint64_t,
        arg2: zip_uint64_t,
        arg3: *mut ::std::os::raw::c_void,
        arg4: zip_uint64_t,
        arg5: *mut zip_error_t,
    ) -> zip_int64_t;
}
extern "C" {
    pub fn zip_source_seek_write(
        arg1: *mut zip_source_t,
        arg2: zip_int64_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zip_source_stat(arg1: *mut zip_source_t, arg2: *mut zip_stat_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zip_source_tell(arg1: *mut zip_source_t) -> zip_int64_t;
}
extern "C" {
    pub fn zip_source_tell_write(arg1: *mut zip_source_t) -> zip_int64_t;
}
extern "C" {
    pub fn zip_source_win32a(
        arg1: *mut zip_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: zip_uint64_t,
        arg4: zip_int64_t,
    ) -> *mut zip_source_t;
}
extern "C" {
    pub fn zip_source_win32a_create(
        arg1: *const ::std::os::raw::c_char,
        arg2: zip_uint64_t,
        arg3: zip_int64_t,
        arg4: *mut zip_error_t,
    ) -> *mut zip_source_t;
}
extern "C" {
    pub fn zip_source_win32handle(
        arg1: *mut zip_t,
        arg2: *mut ::std::os::raw::c_void,
        arg3: zip_uint64_t,
        arg4: zip_int64_t,
    ) -> *mut zip_source_t;
}
extern "C" {
    pub fn zip_source_win32handle_create(
        arg1: *mut ::std::os::raw::c_void,
        arg2: zip_uint64_t,
        arg3: zip_int64_t,
        arg4: *mut zip_error_t,
    ) -> *mut zip_source_t;
}
extern "C" {
    pub fn zip_source_win32w(
        arg1: *mut zip_t,
        arg2: *const wchar_t,
        arg3: zip_uint64_t,
        arg4: zip_int64_t,
    ) -> *mut zip_source_t;
}
extern "C" {
    pub fn zip_source_win32w_create(
        arg1: *const wchar_t,
        arg2: zip_uint64_t,
        arg3: zip_int64_t,
        arg4: *mut zip_error_t,
    ) -> *mut zip_source_t;
}
extern "C" {
    pub fn zip_source_write(
        arg1: *mut zip_source_t,
        arg2: *const ::std::os::raw::c_void,
        arg3: zip_uint64_t,
    ) -> zip_int64_t;
}
extern "C" {
    pub fn zip_source_zip(
        arg1: *mut zip_t,
        arg2: *mut zip_t,
        arg3: zip_uint64_t,
        arg4: zip_flags_t,
        arg5: zip_uint64_t,
        arg6: zip_int64_t,
    ) -> *mut zip_source_t;
}
extern "C" {
    pub fn zip_stat(
        arg1: *mut zip_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: zip_flags_t,
        arg4: *mut zip_stat_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zip_stat_index(
        arg1: *mut zip_t,
        arg2: zip_uint64_t,
        arg3: zip_flags_t,
        arg4: *mut zip_stat_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zip_stat_init(arg1: *mut zip_stat_t);
}
extern "C" {
    pub fn zip_strerror(arg1: *mut zip_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn zip_unchange(arg1: *mut zip_t, arg2: zip_uint64_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zip_unchange_all(arg1: *mut zip_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zip_unchange_archive(arg1: *mut zip_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zip_compression_method_supported(
        method: zip_int32_t,
        compress: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zip_encryption_method_supported(
        method: zip_uint16_t,
        encode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_multibyte_data {
    pub _address: u8,
}
pub type __builtin_va_list = *mut ::std::os::raw::c_char;
